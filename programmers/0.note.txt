1. 구현
2. 구현
3. hash
4. hash
5. hash,sort정책사용
6. 우선순위큐 사용법,우선순위큐 정책사용
7. max_element사용 (sort 정책으로 풀어봐라_코드보면 설명있음)
8. 구현
9. 우선순위큐&multimap사용(multimap max min뽑아내기& iterator이해)
10.정렬
11.정렬(string을 정책사용)
12.구현
13.구현
14.DFS
15.구현(Vector Index로 해결)
16.Kruskal 알고리즘
   Greedy를 이용하여 네트워크(가중치를 간선에 할당한 그래프)의 모든 정점을 최소 비용으로 연결하는 최적 해답을 구하는 것
17.구현(X)
18.DFS
19.DFS
20.DFS
21.DFS
22.DP
23.DP(X)
24.string이용(X)
25.string이용
26.BFS
27.STACK
28.구현
29.구현
30.구현
31.구현
32.구현
33.구현(string이용)_Hint
34.좌표사용구현 좌표의 범위를 잘 파악하자
35.구현
36.구현
37.투포인터방식(2개의 idx사용)
38.이분탐색
39.set사용 or 링크트리스트
40.구현
41.map관련 구현
42.2차원누적합(X)
43.블록이동하기(X)

////////////////////////////////////////////////////////////////////////////////////////////////////
1.배열 초기화는 전역변수는 BSS 영역에서 자동으로 0으로 초기화되만 지역변수 STACK영역에서 자동으로 초기화 되지 않는다.
2.string에서 한 문자만 빼면 char형식으로 저장해야한다.
3.double a = (double)b / (double)c; 처럼 b와 c를 double형으로 만들어라(PROG_37_1)
4.int a = char - 48;  //char를 int로 만드는법
5.
    int n=3;
    while(n--)
    {
        cout<<n<<endl;  //2,1,0
    }
6.map관련문제는 범위를 잘파악하자!(세로길이가 [i][j]에서 i로 와야지)
7.전역변수로 vector<int> vec; 선언시 사이즈 주의하자

vector<int> vec;
void func()
{
    cout << vec.size() << endl; // 0
}

int main()
{
    vector<int> vec(4, 0);
    cout << vec.size() << endl; // 4
    func();
}
////////////////////////////////////////////////////////////////////////////////////////////////////
H-Index : 문제이해어려움
카펫
조이스틱 : 전설의 문제같음 
           답이 없는건 아님
           https://4z7l.github.io/2021/03/12/algorithms-prg-42860.html
           그런데 dfs로는 구현이 어렵고 그리디로 풀려니깐 도저히 안풀림
           인터넷에 있는 다른 풀이도 다 틀림